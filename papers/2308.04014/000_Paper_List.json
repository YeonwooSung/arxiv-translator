{
    "2308.04014": {
        "paper_id": "2308.04014",
        "abs_url": "https://arxiv.org/abs/2308.04014",
        "pdf_url": "https://arxiv.org/pdf/2308.04014.pdf",
        "supp_url": null,
        "src_website": "ArXiv",
        "download_name": "2308.04014_Continual_Pre-Training_of_Large_Language_Models_How_to_rewarm_your_model?.pdf",
        "title": "Continual Pre-Training of Large Language Models: How to (re)warm your model?",
        "year": null,
        "paper_venue": null,
        "authors": [
            "Kshitij Gupta",
            "Benjamin Th\u00e9rien",
            "Adam Ibrahim",
            "Mats L. Richter",
            "Quentin Anthony",
            "Eugene Belilovsky",
            "Irina Rish",
            "Timoth\u00e9e Lesort"
        ],
        "abstract": "Large language models (LLMs) are routinely pre-trained on billions of tokens, only to restart the process over again once new data becomes available. A much cheaper and more efficient solution would be to enable the continual pre-training of these models, i.e. updating pre-trained models with new data instead of re-training them from scratch. However, the distribution shift induced by novel data typically results in degraded performance on past data. Taking a step towards efficient continual pre-training, in this work, we examine the effect of different warm-up strategies. Our hypothesis is that the learning rate must be re-increased to improve compute efficiency when training on a new dataset. We study the warmup phase of models pre-trained on the Pile (upstream data, 300B tokens) as we continue to pre-train on SlimPajama (downstream data, 297B tokens), following a linear warmup and cosine decay schedule. We conduct all experiments on the Pythia 410M language model architecture and evaluate performance through validation perplexity. We experiment with different pre-training checkpoints, various maximum learning rates, and various warmup lengths. Our results show that while rewarming models first increases the loss on upstream and downstream data, in the longer run it improves the downstream performance, outperforming models trained from scratch$\\unicode{x2013}$even for a large downstream dataset.",
        "comments": "",
        "official_code_urls": [
            "https://github.com/eleutherai/gpt-neox"
        ],
        "pwc_page_url": "https://paperswithcode.com/paper/continual-pre-training-of-large-language",
        "bibtex": "@misc{gupta2023continual,\n      title={Continual Pre-Training of Large Language Models: How to (re)warm your model?}, \n      author={Kshitij Gupta and Benjamin Th\u00e9rien and Adam Ibrahim and Mats L. Richter and Quentin Anthony and Eugene Belilovsky and Irina Rish and Timoth\u00e9e Lesort},\n      year={2023},\n      eprint={2308.04014},\n      archivePrefix={arXiv},\n      primaryClass={cs.CL}\n}"
    }
}